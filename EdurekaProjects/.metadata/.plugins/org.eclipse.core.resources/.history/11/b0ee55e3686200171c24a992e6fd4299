from pandas.io.data import DataReader
import datetime
import time
import urllib2
import json
import pandas as pd
import pymongo
import MyConfig
from utils import datetimeutil
import shutil
import pandas as pd
import datetime
import time
from dao import mongoutil
from MyConfig import MyConfig as cfg
import utils.datetimeutil as dateutil

from datetime import date, timedelta
import traceback
import sys
from dao import dbutil
from dao.dbutil import symboldata 


from pandas.core.frame import DataFrame


import os
import MySQLdb


from utils import loglib
logger = loglib.getlogger('dataimport')

BS_START_DATE=datetime.datetime(1993, 01, 01)
NONBS_START_DATE=datetime.datetime(2010, 01, 01)

    

        
def import_data_yahoo_to_files( list_symbols,path,startdate):       
        list_error=[]
        logger.info("importing from "+str(startdate))    
        for symbol in  list_symbols:
            try :                
                    prices_df = DataReader(symbol, "yahoo", startdate)                
                    count_newdata = len(prices_df)
                    print  symbol , " ", count_newdata     
                    if(count_newdata <=0):
                        raise Exception("NO DATA for Dates for %s"%symbol)           
                    prices_df = prices_df.rename(columns={'Date': 'date', 'Open': 'open', 'High': 'high',
                                                   'Low': 'low', 'Close': 'actualclose', 'Adj Close': 'close',
                                                   'Volume': 'volume', 'Symbol': 'symbol'})
                    prices_df['symbol'] = symbol             
                    prices_df['symbol'] = prices_df.apply(lambda x: x['symbol'].replace('\r','').upper(), axis=1 )    
                    prices_df.to_csv(path + "/" + symbol + '.csv')                    
            except Exception as ex:
                logger.error(ex)
                list_error.append(symbol)
                logger.error(traceback.format_exc())
                
        f1=open('error_symbols/error.txt', 'a')
        f1.write(str(list_error))
        f1.close()

def import_data_from_files_todb(path):        
        
        abspath = os.path.abspath(path) + "\\"
        logger.info(abspath)
        list_files = os.listdir(path)
        dbcon = MySQLdb.connect(
                            host=cfg.mysqldb_host, user=cfg.mysqldb_user, passwd=cfg.mysqldb_passwd,
                             db=cfg.mysqldb_db)
        for filename in list_files:
            
            symbol = filename.strip('.csv')
            logger.info("for symbol"+symbol)
            filename = abspath + filename
            filename = filename.replace("\\", "//")
            
            #del_sql = "delete from symbolshistorical where symbol='%s'" % (symbol)
            sql = """LOAD DATA LOCAL INFILE  '%s' INTO TABLE symbolshistorical 
                    FIELDS TERMINATED BY ',' LINES TERMINATED BY '\n' IGNORE 1 LINES
                    (@date,@open,@high,@low,@actualclose,@volume,@close,@symbol) 
                    set date=@date,open=@open,high=@high,low=@low,actualclose=@actualclose,volume=@volume,close=@close,
                    symbol=replace(@symbol,'\r','')""" % (filename)          
            
            #logger.info( sql)
            cursor = dbcon.cursor()
            #cursor.execute(del_sql)            
            cursor.execute(sql)
            dbcon.commit()
        dbcon.close()


def import_data_from_files_tomongo(path,shoulddelete,col_name): 
        con_mongo = pymongo.MongoClient(cfg.mongodb_host, port=cfg.mongodb_port)
        db_chartlab = con_mongo.chartlab 
         
        abspath = os.path.abspath(path) + "\\"
        logger.info(abspath)
        list_files = os.listdir(path)
        
        count=0
        for filename in list_files:
            try:
                symbol = filename.strip('.csv')
                count=count+1
                logger.info("for symbol"+symbol+": "+str(count))
                filename = abspath + filename
                filename = filename.replace("\\", "//") 
                prices_df=pd.read_csv(filename)
                prices_df = prices_df.rename(columns={'Date': 'date', 'Open': 'open', 'High': 'high',
                                                       'Low': 'low', 'Close': 'actualclose', 'Adj Close': 'close',
                                                       'Volume': 'volume', 'Symbol': 'symbol'})
                    
                
                #print prices_df[0:5]    
                if(len(prices_df)>0):
                    if(shoulddelete):
                        
                        db_chartlab[col_name].remove({"symbol":symbol})            
                    prices_df['date'] = prices_df.apply(lambda x: getdatetime(x['date']), axis=1 )       
                    prices_df['symbol'] = prices_df.apply(lambda x: x['symbol'].replace('\r','').upper(), axis=1 )
                    for a in prices_df.iterrows():        
                                tempdict = a[1].to_dict()
                                #print tempdict                                                 
                                db_chartlab[col_name].insert(tempdict) 
            except Exception ,ex:
                logger.error(ex)
                logger.error( traceback.format_exc())                     
        
        con_mongo.close()
          
                
def import_fromdb_tomongo(list_symbols,col_name):  
        con_mongo = pymongo.MongoClient(cfg.mongodb_host, port=cfg.mongodb_port)
        db_chartlab = con_mongo.chartlab  
        for symbol in list_symbols: 
            try:
                
                logger.info('for symbol '+symbol)            
                
                dao_mysql=dbutil.symboldata()             
                
                prices_df=dao_mysql.getdataframeforquery("select * from symbolshistorical where symbol ='%s'"%symbol)
                if(len(prices_df)>0):
                    db_chartlab[col_name].remove({"symbol":symbol})  
                    list_drop_cloumns = ['pk']
                    prices_df = prices_df.drop(list_drop_cloumns, 1)
                    prices_df['date'] = prices_df.apply(lambda x: datetimeutil.getdatetime(x['date']), axis=1 )       
                    for a in prices_df.iterrows():        
                            tempdict = a[1].to_dict()
                                                 
                            db_chartlab[col_name].insert(tempdict) 
            except Exception ,ex:
                logger.error(ex)
                logger.error( traceback.format_exc())                     
        
        con_mongo.close()


def getdatetime(date_in):
    #print date_in
    date=datetime.datetime.strptime(date_in, '%Y-%m-%d')
    #print date
    return date
    #return datetime.datetime(date.year, date.month, date.day, 0, 0,0)



	
    
def etfimport():
    start_date=datetime.datetime(1995, 01, 01)
    mysqldao=dbutil.symboldata()
    list_symbols= mysqldao.get_etfsym_temp()
    path='etf_data/'
    createpath(path)
    importDailyData(list_symbols, start_date, datetime.date.today(), path)
    
    #import_data_from_files_todb(path)
    #import_data_from_files_tomongo(path,False,"etfhistorical")
  
def fromdbtomongo():
#     print sys.argv
#     start=int (sys.argv[1])    
#     end=int (sys.argv[2])
#     print start,end
    
    dao_mysql=dbutil.symboldata()
    list_symbols=dao_mysql.getall_active_symbolsInchunk(1,10000)        
    import_fromdb_tomongo(list_symbols,"symbolshistorical")
def specificimport_date(list_symbols,date_from):
    try:
        mysqldao=symboldata()
        foldername= datetime.datetime.now().strftime("%Y-%m-%d")
        print foldername
        bs_list_symbols=mysqldao.get_bsratingsymbols()
        path="specific_import/"+str(foldername)
        createpath(path)
        
        
        mongodao=mongoutil.mongodata()
        normal_symbols=[]
        snp_symbols=[]
        for symbol in list_symbols:
            if(symbol in bs_list_symbols):
                snp_symbols.append(symbol)
            else:
                normal_symbols.append(symbol)
                    
        if(len(snp_symbols)>0):
            importDailyData(snp_symbols, BS_START_DATE, datetime.date.today(), path)
        if(len(normal_symbols)>0):
            importDailyData(normal_symbols, date_from, datetime.date.today(), path)
        
        for symbol in list_symbols:            
            mysqldao.remove_symbol(symbol)
            mongodao.remove_symbol(symbol)
        import_data_from_files_todb(path)
        import_data_from_files_tomongo(path,False,"symbolshistorical")
        delete_historydata_ifless()
    except Exception ,ex:
        logger.error(ex)
        logger.error( traceback.format_exc()) 	
	

 	
def allhistoryimport():
#     print sys.argv
#     start=int (sys.argv[1])    
#     end=int (sys.argv[2])
#     print start,end
    
    dao_mysql=dbutil.symboldata()
    list_symbols=dao_mysql.getall_active_symbolsInchunk(1,10000)        
    path='historical_data/'
    createpath(path)
    importDailyData(list_symbols, NONBS_START_DATE, datetime.date.today(), path)
    list_symbols=dao_mysql.getindexsymbols()  
    
    importDailyData(list_symbols, NONBS_START_DATE, datetime.date.today(), path)
    
    import_data_from_files_todb(path)
    import_data_from_files_tomongo(path,False,"symbolshistorical")

def specificimport(list_symbols):
   specificimport_date(list_symbols, NONBS_START_DATE)


def createpath(path):
    if(os.path.exists(path)):
            shutil.rmtree(path)
                   
    os.makedirs(path)

def importDailyData(list_symbol, startDate, endDate, basePath):
    for symbol in list_symbol:
        try:
            start_stamp=int(time.mktime(startDate.timetuple()))
            end_stamp =int(time.mktime(endDate.timetuple()))
            start_stamp= start_stamp - 21600
            end_stamp= end_stamp + 21600
            url = "https://query2.finance.yahoo.com/v8/finance/chart/{}?period1={}&period2={}&interval=1d".format(
                symbol,
                start_stamp,
                end_stamp)
            print url
            page = urllib2.urlopen(url, timeout=4)
            response = page.read()
            jsonData = json.loads(response)
            ohlcData = jsonData['chart']['result'][0]['indicators']['quote'][0]
            timestamps = jsonData['chart']['result'][0]['timestamp']
            dates = map(lambda x: datetime.datetime.fromtimestamp(x).date().strftime('%Y-%m-%d'), timestamps)
            high = map(lambda x: round(x, 2), ohlcData['high'])
            low = map(lambda x: round(x, 2), ohlcData['low'])
            opendata = map(lambda x: round(x, 2), ohlcData['open'])
            close = map(lambda x: round(x, 2), ohlcData['close'])
            volume = ohlcData['volume']
            adjclose =map(lambda x:round(x, 2),  jsonData['chart']['result'][0]['indicators']['unadjclose'][0]['unadjclose'])
            df = pd.DataFrame(
                {'date': dates, 'high': high, 'low': low, 'open': opendata, 'actualclose': close, 'volume': volume,
                 'close': adjclose})
            df['symbol'] = symbol
            df=df.groupby('date').first()
            df['date']=df.index
            df =df[['date','open','high','low','actualclose','volume','close','symbol']]
            
            print df[0:5]
            df.to_csv(basePath + "/" + symbol + ".csv", index=False)
        except Exception, ex:
            print ex

   
def dailyimport():
    try:
        mysqldao=symboldata()
        mongodao=mongoutil.mongodata()
        
        startdate=mysqldao.get_maxdate()
        
        
        startdate=startdate[0]
        startdate=startdate+timedelta(days=1)
        if(startdate==datetime.date.today()):
            logger.error("already imported for today")  #exit()
        list_symbols= mysqldao.getall_active_symbolsandindices()
        path = 'daily_data/'+str(startdate)
        createpath(path)
        
            
            
        importDailyData(list_symbols, startdate, datetime.date.today(), path)
        mysqldao.deletehistorydata(startdate.strftime("%Y-%m-%d") )
        startdatetime=dateutil.getdatetime(startdate)
        mongodao.remove_allsymbols_bydate(startdatetime)
        
        import_data_from_files_todb(path)
        import_data_from_files_tomongo(path,False,"symbolshistorical")
        delete_historydata_ifless()
        
        
        
    
    except Exception ,ex:
        logger.error(ex)
        logger.error( traceback.format_exc())
def delete_historydata_ifless():
        mysqldao=symboldata()
        mongodao=mongoutil.mongodata()
        rowcount=mysqldao.get_row_count_historylatest()
        print rowcount
        if(rowcount<500):
            logger.info("count less than 500 so deleting data")
            maxdate=mysqldao.get_maxdate()[0]
            print maxdate
            maxdatetime=dateutil.getdatetime(maxdate)
            mongodao.remove_allsymbols_bydate(maxdatetime)   
            mysqldao.deletehistorydata(maxdate.strftime("%Y-%m-%d") )   
 
def spy500export():
    start_date=datetime.datetime(1995, 01, 01)
    mysqldao=dbutil.symboldata()
    list_symbols=['^GSPC']# mysqldao.get_bsratingsymbols()
    path='spy5001s'
    createpath(path)
    
    importDailyData(list_symbols, start_date, datetime.date.today(), path)
    
    #import_data_from_files_todb(path)
    import_data_from_files_tomongo(path,False,"symbolshistorical")
     